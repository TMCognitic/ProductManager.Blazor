@inject ILogger<EditProduit> logger
@inject IProduitRepository produitRepository
@inject NavigationManager navigation

@page "/produits/edit/{Id:int}"

<h3>Modifier un Produit</h3>

@if (_message is not null)
{
    <h3 class="text-danger">@_message</h3>
}

<EditForm Model="Form" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div>
        <label for="Nom">Nom :</label>
        <InputText id="Nom" @bind-Value="Form.Nom" class="form-control" />
        <ValidationMessage For="() => Form.Nom" />
    </div>
    <div>
        <label for="Prix">Prix :</label>
        <InputNumber id="Prix" @bind-Value="Form.Prix" class="form-control" />
        <ValidationMessage For="() => Form.Prix" />
    </div>
    <div>
        <input type="submit" value="Modifier" class="btn btn-primary" /> | 
        <button class="btn btn-secondary" @onclick="OnCancel">Annuler</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }

    private ModifieProduitForm Form { get; }
    private string? _message = null;

    public EditProduit()
    {
        Form = new ModifieProduitForm();
    }


    protected override async Task OnInitializedAsync()
    {
        Result<Produit> queryResult = await produitRepository.ExecuteAsync(new DetailProduitQuery(Id));

        if (queryResult.IsFailure)
        {
            navigation.NavigateTo("/produits");
            return;
        }

        Form.Nom = queryResult.Content.Nom;
        Form.Prix = queryResult.Content.Prix;
    }

    private async void OnValidSubmit()
    {
        Result result = await produitRepository.ExecuteAsync(new ModifierProduitCommand(Id, Form.Nom, Form.Prix));

        if (result.IsFailure)
            logger.LogError($"Error : {result.ErrorMessage}");
        
        navigation.NavigateTo("/produits");
    }

    private void OnCancel()
    {
        navigation.NavigateTo("/produits");
    }
}
